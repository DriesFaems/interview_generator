from groq import Groq
import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
import tempfile
from crewai import Crew, Agent, Task, Process
from langchain_community.tools import DuckDuckGoSearchRun
from langchain_openai import ChatOpenAI
import json
import os
import requests
from langchain.tools import tool
from langchain.agents import load_tools
from langchain_openai import ChatOpenAI
from crewai_tools import tool
from crewai import Crew, Process
import tomllib
from langchain_groq import ChatGroq


# create title for the streamlit app

st.title('Autonomous Customer Interviewer')

# create a description

st.write(f"""This app is designed to help you conduct customer interviews. It uses the Llama 3 model on Groq to generate questions, 
         execute the interview and summarize the interview. As a final output, it will also generate a first suggestion for a value proposition that can solve the identified painpoints in the customer interview. For more information, contact Dries Faems at https://www.linkedin.com/in/dries-faems-0371569/""")

# create a text input for the user to input the name of the customer

job_to_be_done = st.text_input('What is the job to be done, which you want to explore in the interview?')
customer_pofile = st.text_input('What is the profile of the customer you want to interview?')

# ask for the API key in password form


groq_api_key = st.secrets["GROQ_API_KEY"]
os.environ["GROQ_API_KEY"] = groq_api_key


client = Groq()


GROQ_LLM = ChatGroq(
            # api_key=os.getenv("GROQ_API_KEY"),
            model="llama3-70b-8192"
        )

# create a button to start the interview

if st.button('Start Interview'):
    interview_question_generator = Agent(
        role='Generating interview questions',
        goal=f"""Prepare a list of interview questions to ask customers about the problems they face regarding a job-to-be-done.""", 
        backstory=f"""You are a great expert in generating interview questions to better understand the painpoints for a specific job-to-be-done. You will prepare a list of questions to ask customers about the problems they face regarding a job-to-be-done.
        Typical examples of questions are: (i) What is the hardest part of the job_to_be_done, (ii) When did you face this hardes part for the last time, (iii) What did you do to overcome this problem, (iv) What would you like to see improved in the future?. Based on your great experience, please think about additional questions that would be relevant to ask to better understand the pain points of the job-to-be-done.""",
        verbose=True,
        llm=GROQ_LLM,
        allow_delegation=False,
        max_iter=5,
        memory=True,
    )

    customer_interviewer = Agent(
        role='Executing customer interviews',
        goal=f"""Conduct semi-structured customer interviews starting from the questions that are prepared by the interview question generator.""",
        backstory="""You are a great expert in conducting interviews with customers to better understand the painpoitns for a specific job-to-be-done.
        You rely on the questions that are generated by the interview question generator. You can probe for additional questions to get a deep understanding of the underlying 
        pain points. It is crucial that you ask for for examples to better understand the context of the problem.""",
        verbose=True,
        llm=GROQ_LLM,
        allow_delegation=False,
        max_iter=5,
        memory=True,
    )

    interview_analyzer = Agent(
        role='Analyzing customer interviews',
        goal=f"""Analyze the customer interviews to identify the most pressing problems that customers are facing regarding a job-to-be-done.""",
        backstory="""You are a great expert in analyzing customer interviews to identify the most pressing problems that customers are facing regarding a specific job-to-be-done. You will analyze the interviews conducted by the customer interviewer and identify the most pressing problems that customers are facing regarding the job-to-be-done: {job_to_be_done}.""",
        verbose=True,
        llm=GROQ_LLM,
        allow_delegation=False,
        max_iter=5,
        memory=True,
    )

    value_proposition_designer = Agent(
        role='Designing value propositions',
        goal=f"""Design unique value propositions for a startup that aims to solve some of the problems that customers are facing regarding a job-to-be-done.""",
        backstory="""You are a great expert in creating a startup to address pain points related to a specific job-to-be-done. 
        You will use the insights from the customer interviews and the analysis to design a value proposition that address some of pressing problems that customers are facing
        regarding a job-to-be-done. You do not need to consider all identified pain points. Just focus on the most pressing ones and come up with a coherent value proposition.""",
        verbose=True,
        llm=GROQ_LLM,
        allow_delegation=False,
        max_iter=5,
        memory=True,
    )
    # Create tasks for the agents
    generate_interview_questions = Task(
        description=f"""Generate interview questions to ask customers about the problems they face regarding the following job-to-be-done: {job_to_be_done}. Here is a description of the customer profile: {customer_pofile}""",
        expected_output='As output, you provide a list of interview questions that can be used to interview customers.',
        agent=interview_question_generator
    )

    interview_customer = Task(
        description=f"""Interview the customer to identify painpoints about the following job to be done: {job_to_be_done}. Here is a description of the customer profile:
        {customer_pofile}. It is important to rely on the questions generated by the interview_question_generator.""",
        expected_output="""As output, you provide a transcript of the interview.""",
        agent=customer_interviewer
    )

    analyze_interview = Task(
        description=f"""Analyze the customer interview that is executed by the customer_interviewer.""",
        expected_output='As output, you provide a summary of the most pressing problems identified in the interviews.',
        agent=interview_analyzer
    )

    design_value_proposition = Task(
        description=f"""Design a unique value proposition for a startup to address some of the pain points that were identified by the interview_analyzer.""",
        expected_output='As output, you provide a clear and specific value proposition that address the most pressing problems identified in the interviews. The value proposition should be unique and compelling and provide specific solutions to some of the identified painpoints.',
        agent=value_proposition_designer
    )

    # Instantiate the first crew with a sequential process
    crew = Crew(
        agents=[interview_question_generator, customer_interviewer, interview_analyzer, value_proposition_designer],
        tasks=[generate_interview_questions, interview_customer, analyze_interview, design_value_proposition],
        verbose=2,
        process=Process.sequential,
        full_output=True,
        share_crew=False,
    )
    # Kick off the crew's work
    results = crew.kickoff()

    st.markdown('**List of questions generated for the interview**')
    st.write(generate_interview_questions.output.raw_output)
    st.markdown('**Transcript of the interview**')
    st.write(interview_customer.output.raw_output)
    st.markdown('**Summary of the most pressing problems identified in the interviews**')
    st.write(analyze_interview.output.raw_output)
    st.markdown('**Value proposition that addresses the most pressing problems identified in the interviews**')
    st.write(design_value_proposition.output.raw_output)
    

else:
    st.write('Please click the button to start the interview')
